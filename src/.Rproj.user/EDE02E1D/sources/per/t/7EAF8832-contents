---
title: "Beer Reviews Analysis"
author: Yang Peng
date: "`r format(Sys.time(), '%d %B %Y')`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggcorrplot)
library(knitr)
beer.reviews <- read.csv("../data/beer_reviews.csv")
attach(beer.reviews)
```
## Summary of the Dataset
This dataset consists of approximately 1.5 million beer reviews from Beer Advocate.

Number of Instances:
```{r }
dim(beer.reviews)[1]
```
Number of Attributes:
```{r }
dim(beer.reviews)[2]
```
Dataset example:
```{r }
kable(beer.reviews[1:5,])
```



## Five number summarys 
```{r }
summary(beer_abv)
summary(review_overall)
summary(review_aroma)
summary(review_appearance)
summary(review_palate)
summary(review_taste)
```
From the summary above, we know that there are many missing values in beer_abv and the review score is ranging from 0 to 5.

## Data Cleaning and Checking

Check the count of missing or empty values for beer_abv and brewery_name in Qestion 1:

```{r }
sum(is.na(beer_abv)|beer_abv=="")
sum(is.na(brewery_name)|brewery_name=="")
```

Remove NA values and save into d2:
```{r }
d2 <- na.omit(beer.reviews)#remove rows contains NA value
dim(d2)
(dim(beer.reviews)[1]-dim(d2)[1])/dim(beer.reviews)[1] #check the percent of the removed rows. 
```

It shows that the cleaned parts is less than 5%, so we used the cleaned dataset d2 for the following analysis.

Check the length of unique brewery_name and brewery_id:
```{r }
length(unique(d2$brewery_name))
length(unique(d2$brewery_id))
```

It turns out the number of unique brewey_id is greater than the number of unique brewery_name, which means different id may have same brewery_name. It can be caused by cutting off by the length of charater.Same as beer_id and beer_name:

```{r }
length(unique(d2$beer_name))
length(unique(d2$beer_beerid))
```
So here I used brewery_id and beer_beerid as the index of different categories.



## 1. Which brewery produces the strongest beers by ABV%?

Find the average beer_adv group by brewery_id:
```{r }
a <- aggregate(d2$beer_abv, list(d2$brewery_id), mean,na.omit=T)
dim(a)
```


Find the unique brewery name which has the max beer_abv:
```{r }
ii <- a$Group.1[a$x==max(a$x)]
unique(d2$brewery_name[d2$brewery_id==ii])#[1] Schorschbr채u
barplot(a$x)
```

It shows Schorschbr채u has the max beer ABV% and we can see from the barplot that only one brewery has the noticeable highest abv, which is Schorschbr채u. 
**So Schorschbr채u produces the strongest beers by ABV%.**





##2. If you had to pick 3 beers to recommend using only this data, which would you pick?

Find the review frequency table group by beer_beerid
```{r }
fq <- table(d2$beer_beerid)
length(names(fq==max(fq)))
```
The length of beer_beerid which has the max frequency is 49012. Solely depends on the number of review to determine the top 3 popular is not enough.


```{r }
quantile(fq)#
mean(fq)
```
There are 75% types of beer_beerid has less than 10 reviews and  mean is  30.98892.


```{r }
hist(fq,col="yellow",breaks = 20,main="Histogram of review frequency")
```

Use mean review_overall to determine the popularity:
```{r }
table(d2$review_overall)
```
There are  89017 reviews has 5.

Plot for "mean review_overall" vs "review frequency". It turns out higher mean review_overall also has higher review counts:
```{r }
t <- as.data.frame(cbind(b[,2],fq))
colnames(t) <- c("mean review_overall","review frequency")
ggplot(t, aes(x=`mean review_overall`, y=`review frequency`)) + geom_point(shape=1,color="blue")
```


A good beer should has a reasonable amount of reviews and has a high review score as well. In other words, large number of the reviews, large mean of the review_overall and small variance of review_overall consist of the criterion of ranking beers.

So, here I used the lower bound of 95% confidence interval as the measurement of ranking beers:x_bar-t*sd/sqrt(n).

Moreover, the number of reviews cannot be too small, based on the scatter plot above, here I use 100 as the threshold:

```{r }
ss <- split.data.frame(d2[,c(4,13)],d2$beer_beerid)

getCI <- function(x){
  if(dim(x)[1]<100){
    lowci=0
  }else{
    b <- t.test(x$review_overall)
    lowci <- b$conf.int[1]
  }
  
}

top3 <- sort(sapply(ss,getCI),decreasing = T)[1:3]
unique(d2$beer_name[d2$beer_beerid %in% names(top3)])
```
**It shows that "Citra DIPA", "Heady Topper" and "Trappist Westvleteren 12" are the three beers that I want to recommended based on this dataset.**


##3. Which of the factors (aroma, taste, appearance, palette) are most important in determining the overall quality of a beer?

First, I used the correlations between these fators to figure out which one is most important:
```{r }
reviewMt <- cbind(d2$review_overall,d2$review_aroma,d2$review_appearance,d2$review_palate,d2$review_taste)
revcor <-round(cor(reviewMt),2)
colnames(revcor) <- rownames(revcor) <- c("overall","aroma","appearance","palate","taste")
ggcorrplot(revcor, hc.order = TRUE,lab = TRUE)
```

From the correlation heat plot we can see that taste is the most important.

Second, I also incoporate linear model and t-test to support the above result:
```{r }
# fit a linear model for diff reviews
lmfit <- lm(d2$review_overall~d2$review_aroma+d2$review_appearance+d2$review_palate+d2$review_taste)
summary(lmfit)

```


Based on the p-value and t-statistic can also get the same conclusion.

One may guess maybe it is because of the range of reviews. Review score is from 0 to 5. So I transformed the review_overall to be from -Inf to Inf and refit linear model to see if it can improve R-square:
```{r }
y1 <- d2$review_overall/5
y <- log((y1+0.001)/(1.001-y1))
lmfit3 <- lm(y~d2$review_aroma+d2$review_appearance+d2$review_palate+d2$review_taste)
summary(lmfit3)
```

R-square reduced to 35% which doesn't make sense.

Lastly, I fit a nonlinear model, Random Forest, to vote for the most important factor:
```{r}
rf <- randomForest(d2$review_overall~d2$review_aroma+d2$review_appearance+d2$review_palate+d2$review_taste, 
                    importance=TRUE, 
                    ntree=20)
varImpPlot(rf)
```
The plot above also indicates the variable taste to be the most important factor, which is consistent with the finding in linear model. 

**In sum, taste is the most important fator based on all the analysis above.**




##4. Lastly, if I typically enjoy a beer due to its aroma and appearance, which beer style should I try?

Add a new column "subtol2" as the sum of review_aroma and review_appearance into d2:
```{r }
subtol2 <- d2$review_aroma+d2$review_appearance
d2$subtol2 <- subtol2
```

Find the average of "subtol2" group by beer style and get the one with maximum subtotal of review_aroma and review_appearance :
```{r }
ff <- aggregate(d2$subtol2, list(d2$beer_style), mean,na.omit=T)
gg <- ff[ff$x==max(ff$x),]
gg
dim(d2[d2$beer_style==gg$Group.1,])[1]
```
Due to the large amount of reviews for American Double / Imperial Stout, the finding is convincing. 
**American Double / Imperial Stout is recommended if you typically enjoy a beer due to its aroma and appearance.**
